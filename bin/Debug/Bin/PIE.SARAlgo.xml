<?xml version="1.0"?>
<doc>
    <assembly>
        "SARAlgo"
    </assembly>
    <members>
        <member name="M:PIE.SARAlgo.PolSAR_PolSignaturesAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info.nCol">
            <summary>
列号
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info.nRow">
            <summary>
行号
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info.strOutputFile">
            <summary>
输出文件
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info.strInputVVFile">
            <summary>
输入VV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info.strInputVHFile">
            <summary>
输入VH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info.strInputHVFile">
            <summary>
输入HV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info.strInputHHFile">
            <summary>
输入HH极化文件 (*.tiff)
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_PolSignatures_Exchange_Info">
            <summary>
点目标极化响应算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_PolSignaturesAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PolSignaturesAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PolSignaturesAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PolSignaturesAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_PolSignaturesAlgo">
            <summary>
点目标极化响应算法
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_MatrixConvertAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.strOutputFileDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.nRnglooks">
            <summary>
距离向视数（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.nAzilooks">
            <summary>
方位向视数（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.nConvertType">
            <summary>
极化矩阵转换方法(C3=1,T3=2,C4=3,T4=4)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.strInputVVFile">
            <summary>
输入VV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.strInputVHFile">
            <summary>
输入VH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.strInputHVFile">
            <summary>
输入HV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info.strInputHHFile">
            <summary>
输入HH极化文件 (*.tiff)
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_MatrixConvert_Exchange_Info">
            <summary>
极化矩阵转换算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_MatrixConvertAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_MatrixConvertAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_MatrixConvertAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_MatrixConvertAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_MatrixConvertAlgo">
            <summary>
极化矩阵转换导入
</summary>
        </member>
        <member name="M:PIE.SARAlgo.GF3_StripDataSLCImportAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strOutputFileDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strOutFilePrefix">
            <summary>
输出文件名前缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.bImageryVVSelected">
            <summary>
是否输入VV
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.bImageryVHSelected">
            <summary>
是否输入VH
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.bImageryHVSelected">
            <summary>
是否输入HV
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.bImageryHHSelected">
            <summary>
是否输入HH
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strInputVVFile">
            <summary>
输入VV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strInputVHFile">
            <summary>
输入VH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strInputHVFile">
            <summary>
输入HV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strInputHHFile">
            <summary>
输入HH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info.strMetaXml">
            <summary>
输入影像元数据文件 (*. meta.xml)
</summary>
        </member>
        <member name="T:PIE.SARAlgo.GF3_StripDataSLCImport_Exchange_Info">
            <summary>
高分3数据导入算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.GF3_StripDataSLCImportAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.GF3_StripDataSLCImportAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.GF3_StripDataSLCImportAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.GF3_StripDataSLCImportAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.GF3_StripDataSLCImportAlgo">
            <summary>
高分三号数据导入
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_GaussFilterAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_GaussFilter_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_GaussFilter_Exchange_Info.nWinCol">
            <summary>
列窗口大小（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_GaussFilter_Exchange_Info.nWinLine">
            <summary>
行窗口大小（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_GaussFilter_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_GaussFilter_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_GaussFilter_Exchange_Info">
            <summary>
Gauss滤波处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_GaussFilterAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_GaussFilterAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_GaussFilterAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_GaussFilterAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_GaussFilterAlgo">
            <summary>
Boxcar滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.S1TOPSSLCDataImportAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.enCalibrationType">
            <summary>
定标类型
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.enPolarizationMode">
            <summary>
极化模式
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strOutFilePrefix">
            <summary>
输出文件名字（无后缀名）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strOutputDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strPrecisionOrbit">
            <summary>
精轨文件（.EOF）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.bHasPreOrbit">
            <summary>
False:不输入；True：输入
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strNoiseList">
            <summary>
输入Noise文件 (*.xml)
位于annotation\calibration文件夹下
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strCalibretionList">
            <summary>
输入影像Calibretion文件 (*.xml)
位于annotation\Calibretion文件夹下
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strMeasurementList">
            <summary>
输入measurement文件 (*.tiff)
位于measurement文件夹下
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info.strAnnotationsList">
            <summary>
输入影像Annotation文件 (*.xml)
位于annotation文件夹下
</summary>
        </member>
        <member name="T:PIE.SARAlgo.S1TOPSSLCDataImport_Exchange_Info">
            <summary>
哨兵1-TOPS数据导入
</summary>
        </member>
        <member name="P:PIE.SARAlgo.S1TOPSSLCDataImportAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.S1TOPSSLCDataImportAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.S1TOPSSLCDataImportAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.S1TOPSSLCDataImportAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.S1TOPSSLCDataImportAlgo">
            <summary>
Frost滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.S1StripSLCDataImportAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.enCalibrationType">
            <summary>
定标类型
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.enPolarizationMode">
            <summary>
极化模式
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strOutFilePrefix">
            <summary>
输出文件名字（无后缀名）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strOutputDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strPrecisionOrbit">
            <summary>
精轨文件（.EOF）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.bHasPreOrbit">
            <summary>
False:不输入；True：输入
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strNoiseList">
            <summary>
输入Noise文件 (*.xml)
位于annotation\calibration文件夹下
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strCalibretionList">
            <summary>
输入影像Calibretion文件 (*.xml)
位于annotation\Calibretion文件夹下
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strMeasurementList">
            <summary>
输入measurement文件 (*.tiff)
位于measurement文件夹下
</summary>
        </member>
        <member name="F:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info.strAnnotationsList">
            <summary>
输入影像Annotation文件 (*.xml)
位于annotation文件夹下
</summary>
        </member>
        <member name="T:PIE.SARAlgo.S1StripSLCDataImport_Exchange_Info">
            <summary>
哨兵1-Strip数据导入
</summary>
        </member>
        <member name="P:PIE.SARAlgo.S1StripSLCDataImportAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.S1StripSLCDataImportAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.S1StripSLCDataImportAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.S1StripSLCDataImportAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.S1StripSLCDataImportAlgo">
            <summary>
Frost滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterEnLeeAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnLee_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnLee_Exchange_Info.EnumImageType">
            <summary>
输入数据的类型选项 { EnLee_Amplitude, EnLee_Intensity }
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnLee_Exchange_Info.lNumberOfLook">
            <summary>
视数（正整数，默认为1）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnLee_Exchange_Info.dDamp">
            <summary>
阻尼系数（正数，浮点型，默认为1.00）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnLee_Exchange_Info.nFilterSize">
            <summary>
滤波窗口（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnLee_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnLee_Exchange_Info.strOutputDir">
            <summary>
输出文件目录
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnLee_Exchange_Info.strInputFileList">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterEnLee_Exchange_Info">
            <summary>
EnLee滤波算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.EnLeeDataType.EnLee_Intensity">
            <summary>
强度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.EnLeeDataType.EnLee_Amplitude">
            <summary>
幅度
</summary>
        </member>
        <member name="P:PIE.SARAlgo.FilterEnLeeAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterEnLeeAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterEnLeeAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterEnLeeAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterEnLeeAlgo">
            <summary>
EnLee滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.CSK_SLCDataImportAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.CSK_SLCDataImport_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开
</summary>
        </member>
        <member name="F:PIE.SARAlgo.CSK_SLCDataImport_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.CSK_SLCDataImport_Exchange_Info.strOutputFile">
            <summary>
输出文件
</summary>
        </member>
        <member name="F:PIE.SARAlgo.CSK_SLCDataImport_Exchange_Info.strInputFile">
            <summary>
输入文件（*.h5）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.CSK_SLCDataImport_Exchange_Info">
            <summary>
COSMO_SkyMed数据导入
</summary>
        </member>
        <member name="P:PIE.SARAlgo.CSK_SLCDataImportAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.CSK_SLCDataImportAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.CSK_SLCDataImportAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.CSK_SLCDataImportAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.CSK_SLCDataImportAlgo">
            <summary>
COSMO_SkyMed数据导入
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_YamaguchiDecAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.Yamamodel">
            <summary>
分解方法（0：Y40，1：Y4R,2:S4R）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.DataTypeIn">
            <summary>
输入数据类型选项（1：T3矩阵，2：C3矩阵）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.bStretch">
            <summary>
是否拉伸
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.nWinCol">
            <summary>
列窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.nWinLine">
            <summary>
行窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage33">
            <summary>
T33或C33影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage23_imag">
            <summary>
T23_imag或C23_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage23_real">
            <summary>
T23_real或C23_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage22">
            <summary>
T22或C22影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage13_imag">
            <summary>
T13_imag或C13_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage13_real">
            <summary>
T13_real或C13_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage12_imag">
            <summary>
T12_imag或C12_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage12_real">
            <summary>
T12_real或C12_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strImage11">
            <summary>
T11或C11影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_YamaguchiDec_Exchange_Info">
            <summary>
Yamaguchi分解处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_YamaguchiDecAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_YamaguchiDecAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_YamaguchiDecAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_YamaguchiDecAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_YamaguchiDecAlgo">
            <summary>
Yamaguchi分解
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_AnYangDecAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.DataTypeIn">
            <summary>
输入数据类型选项（1：T3矩阵，2：C3矩阵）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.bStretch">
            <summary>
是否拉伸
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.nWinCol">
            <summary>
列窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.nWinLine">
            <summary>
行窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage33">
            <summary>
T33或C33影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage23_imag">
            <summary>
T23_imag或C23_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage23_real">
            <summary>
T23_real或C23_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage22">
            <summary>
T22或C22影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage13_imag">
            <summary>
T13_imag或C13_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage13_real">
            <summary>
T13_real或C13_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage12_imag">
            <summary>
T12_imag或C12_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage12_real">
            <summary>
T12_real或C12_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strImage11">
            <summary>
T11或C11影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_AnYangDec_Exchange_Info">
            <summary>
AnYang分解处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_AnYangDecAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_AnYangDecAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_AnYangDecAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_AnYangDecAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_AnYangDecAlgo">
            <summary>
AnYang分解
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterLeeAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.EnumImageType">
            <summary>
输入数据的类型选项 {Lee_Amplitude, Lee_Intensity }
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.NoiseType">
            <summary>
噪声抑制方法{ Lee_Additive, Lee_Multiplicative, Lee_Both }
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.dNoiseAddVariance">
            <summary>
噪声方差（浮点型，默认0.25）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.dMultNoiseMean">
            <summary>
乘性噪声均值（浮点型，默认为1.00）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.dAddNoiseMean">
            <summary>
加性噪声均值（浮点型，默认为0.00）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.nFilterSize">
            <summary>
滤波窗口（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.strOutputDir">
            <summary>
输出文件目录
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterLee_Exchange_Info.strInputFileList">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterLee_Exchange_Info">
            <summary>
Lee滤波算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.LeeDataType.Lee_Intensity">
            <summary>
强度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.LeeDataType.Lee_Amplitude">
            <summary>
幅度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.LeeNoiseTypeEnum.Lee_Both">
            <summary>
二者
</summary>
        </member>
        <member name="F:PIE.SARAlgo.LeeNoiseTypeEnum.Lee_Multiplicative">
            <summary>
乘性
</summary>
        </member>
        <member name="F:PIE.SARAlgo.LeeNoiseTypeEnum.Lee_Additive">
            <summary>
加性
</summary>
        </member>
        <member name="P:PIE.SARAlgo.FilterLeeAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterLeeAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterLeeAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterLeeAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterLeeAlgo">
            <summary>
Lee滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Slant2GroundAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.bHasParsedXml">
            <summary>
是否解析xml
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.dbRngResolution">
            <summary>
距离向分辨率
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.dbAziResolution">
            <summary>
方位向分辨率
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.dbFarRange">
            <summary>
近距离
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.dbNearRange">
            <summary>
近距离
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.dbSatelliteHeight">
            <summary>
卫星高
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.dbPixelSize">
            <summary>
像素大小
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Slant2Ground_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Slant2Ground_Exchange_Info">
            <summary>
斜地距转换算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.Slant2GroundAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Slant2GroundAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Slant2GroundAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Slant2GroundAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Slant2GroundAlgo">
            <summary>
Frost滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterFrostAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterFrost_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterFrost_Exchange_Info.EnumImageType">
            <summary>
输入数据的类型选项 { Frost_Amplitude, Frost_Intensity }
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterFrost_Exchange_Info.dDamp">
            <summary>
阻尼系数（正数，浮点型，默认为1.00）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterFrost_Exchange_Info.nFilterSize">
            <summary>
滤波窗口（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterFrost_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterFrost_Exchange_Info.strOutputDir">
            <summary>
输出文件目录
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterFrost_Exchange_Info.strInputFileList">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterFrost_Exchange_Info">
            <summary>
Frost滤波算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FrostDataType.Frost_Intensity">
            <summary>
强度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FrostDataType.Frost_Amplitude">
            <summary>
幅度
</summary>
        </member>
        <member name="P:PIE.SARAlgo.FilterFrostAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterFrostAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterFrostAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterFrostAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterFrostAlgo">
            <summary>
Frost滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.SingleImageCropAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.SingleImageCrop_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.SingleImageCrop_Exchange_Info.nCropPixels">
            <summary>
裁剪列数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.SingleImageCrop_Exchange_Info.nCropLines">
            <summary>
裁剪行数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.SingleImageCrop_Exchange_Info.nStartPixel">
            <summary>
起始列
</summary>
        </member>
        <member name="F:PIE.SARAlgo.SingleImageCrop_Exchange_Info.nStartLine">
            <summary>
起始行
</summary>
        </member>
        <member name="F:PIE.SARAlgo.SingleImageCrop_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.SingleImageCrop_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.SingleImageCrop_Exchange_Info">
            <summary>
单景影像裁剪算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.SingleImageCropAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.SingleImageCropAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.SingleImageCropAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.SingleImageCropAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.SingleImageCropAlgo">
            <summary>
裁剪
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_BasisChangeAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.strOutputFileDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.dbTau">
            <summary>
椭圆率角
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.dbPhi">
            <summary>
方位角
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.strInputVVFile">
            <summary>
输入VV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.strInputVHFile">
            <summary>
输入VH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.strInputHVFile">
            <summary>
输入HV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.strInputHHFile">
            <summary>
输入HH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info.strInputPath">
            <summary>
输入文件夹路径
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_BasisChange_Exchange_Info">
            <summary>
极化基变换算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_BasisChangeAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_BasisChangeAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_BasisChangeAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_BasisChangeAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_BasisChangeAlgo">
            <summary>
极化基变换算法
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_RGBCombineAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.channelB">
            <summary>
自定义B通道选择
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.channelG">
            <summary>
自定义G通道选择
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.channelR">
            <summary>
自定义R通道选择
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.channelType">
            <summary>
RGB合成方法{PolSAR_Pauli, PolSAR_Sinclair, PolSAR_Combine };
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.inputType">
            <summary>
输入影像类型选项{PolSAR_Type_S2,PolSAR_Type_T3, PolSAR_Type_C3 };
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT33">
            <summary>
T33影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT23_imag">
            <summary>
T23_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT23_real">
            <summary>
T23_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT22">
            <summary>
T22影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT13_imag">
            <summary>
T13_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT13_real">
            <summary>
T13_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT12_imag">
            <summary>
T12_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT12_real">
            <summary>
T12_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageT11">
            <summary>
T11影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC33">
            <summary>
C33影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC23_imag">
            <summary>
C23_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC23_real">
            <summary>
C23_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC22">
            <summary>
C22影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC13_imag">
            <summary>
C13_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC13_real">
            <summary>
C13_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC12_imag">
            <summary>
C12_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC12_real">
            <summary>
C12_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strImageC11">
            <summary>
C11影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strInputVVFile">
            <summary>
输入VV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strInputVHFile">
            <summary>
输入VH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strInputHVFile">
            <summary>
输入HV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strInputHHFile">
            <summary>
输入HH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info.strInputFilePath">
            <summary>
输入路径
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_RGBCombine_Exchange_Info">
            <summary>
Pol-RGB通道合成算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_InputTypeEnum.PolSAR_Type_C3">
            <summary>
C3
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_InputTypeEnum.PolSAR_Type_T3">
            <summary>
T3
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_InputTypeEnum.PolSAR_Type_S2">
            <summary>
S2
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_RGBCombineAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_RGBCombineAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_RGBCombineAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_RGBCombineAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_RGBCombineAlgo">
            <summary>
Yamaguchi分解
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterKuanAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterKuan_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterKuan_Exchange_Info.EnumImageType">
            <summary>
输入数据的类型选项 { Kuan_Amplitude, Kuan_Intensity }
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterKuan_Exchange_Info.lNumberOfLook">
            <summary>
视数（正整数，默认为1）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterKuan_Exchange_Info.nFilterSize">
            <summary>
滤波窗口（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterKuan_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterKuan_Exchange_Info.strOutputDir">
            <summary>
输出文件目录
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterKuan_Exchange_Info.strInputFileList">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterKuan_Exchange_Info">
            <summary>
Kuan滤波算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.KuanDataType.Kuan_Intensity">
            <summary>
强度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.KuanDataType.Kuan_Amplitude">
            <summary>
幅度
</summary>
        </member>
        <member name="P:PIE.SARAlgo.FilterKuanAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterKuanAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterKuanAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterKuanAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterKuanAlgo">
            <summary>
Kuan滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PWFFilterAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PWFFilter_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PWFFilter_Exchange_Info.nWinCol">
            <summary>
列窗口大小（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PWFFilter_Exchange_Info.nWinLine">
            <summary>
行窗口大小（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PWFFilter_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PWFFilter_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_PWFFilter_Exchange_Info">
            <summary>
白化滤波滤波处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_PWFFilterAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PWFFilterAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PWFFilterAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PWFFilterAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_PWFFilterAlgo">
            <summary>
白化滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_RefinedLeeFilterAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RefinedLeeFilter_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RefinedLeeFilter_Exchange_Info.nNumberOfLook">
            <summary>
视数（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RefinedLeeFilter_Exchange_Info.nWinCol">
            <summary>
列窗口大小（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RefinedLeeFilter_Exchange_Info.nWinLine">
            <summary>
行窗口大小（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RefinedLeeFilter_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_RefinedLeeFilter_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_RefinedLeeFilter_Exchange_Info">
            <summary>
精致Lee滤波处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_RefinedLeeFilterAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_RefinedLeeFilterAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_RefinedLeeFilterAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_RefinedLeeFilterAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_RefinedLeeFilterAlgo">
            <summary>
精致Lee滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_MultiLookAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiLook_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiLook_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiLook_Exchange_Info.outMultiType">
            <summary>
多视输出选项{ Batch_MultiComplex, Batch_MultiAmplitude }
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiLook_Exchange_Info.rngMultiLookNum">
            <summary>
距离向多视视数（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiLook_Exchange_Info.aziMultiLookNum">
            <summary>
方位向多视视数（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiLook_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiLook_Exchange_Info.strOutDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiLook_Exchange_Info.InputFilesList">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Batch_MultiLook_Exchange_Info">
            <summary>
批量多视算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiTypeEnum.Batch_MultiAmplitude">
            <summary>
多视幅度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_MultiTypeEnum.Batch_MultiComplex">
            <summary>
多视复数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.Batch_MultiLookAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_MultiLookAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_MultiLookAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_MultiLookAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Batch_MultiLookAlgo">
            <summary>
多视处理
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_FreemanDecAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.DataTypeIn">
            <summary>
输入数据类型选项（1：T3矩阵，2：C3矩阵）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.bStretch">
            <summary>
是否拉伸
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.nWinCol">
            <summary>
列窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.nWinLine">
            <summary>
行窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage33">
            <summary>
T33或C33影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage23_imag">
            <summary>
T23_imag或C23_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage23_real">
            <summary>
T23_real或C23_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage22">
            <summary>
T22或C22影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage13_imag">
            <summary>
T13_imag或C13_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage13_real">
            <summary>
T13_real或C13_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage12_imag">
            <summary>
T12_imag或C12_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage12_real">
            <summary>
T12_real或C12_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strImage11">
            <summary>
T11或C11影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_FreemanDec_Exchange_Info">
            <summary>
Freeman分解处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_FreemanDecAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_FreemanDecAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_FreemanDecAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_FreemanDecAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_FreemanDecAlgo">
            <summary>
Freeman分解
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_ComplexDataConvertAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_ComplexDataConvert_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_ComplexDataConvert_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_ComplexDataConvert_Exchange_Info.convertType">
            <summary>
文件转换类型
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_ComplexDataConvert_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_ComplexDataConvert_Exchange_Info.strOutDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_ComplexDataConvert_Exchange_Info.InputComplexFilesList">
            <summary>
输入影像列表（*.tif,*.tiff,*.img
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Batch_ComplexDataConvert_Exchange_Info">
            <summary>
复数据转换算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.ConvertTypeEnum.Imag">
            <summary>
虚部
</summary>
        </member>
        <member name="F:PIE.SARAlgo.ConvertTypeEnum.Real">
            <summary>
实部
</summary>
        </member>
        <member name="F:PIE.SARAlgo.ConvertTypeEnum.Phase">
            <summary>
相位
</summary>
        </member>
        <member name="F:PIE.SARAlgo.ConvertTypeEnum.Amplitude">
            <summary>
幅度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.ConvertTypeEnum.Intensity">
            <summary>
强度
</summary>
        </member>
        <member name="P:PIE.SARAlgo.Batch_ComplexDataConvertAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_ComplexDataConvertAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_ComplexDataConvertAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_ComplexDataConvertAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Batch_ComplexDataConvertAlgo">
            <summary>
复数据转换
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterEnFrostAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnFrost_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnFrost_Exchange_Info.EnumImageType">
            <summary>
输入数据的类型选项 { EnFrost_Amplitude, EnFrost_Intensity }
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnFrost_Exchange_Info.lNumberOfLook">
            <summary>
视数（正整数，默认为1）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnFrost_Exchange_Info.dDamp">
            <summary>
阻尼系数（正数，浮点型，默认为1.00）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnFrost_Exchange_Info.nFilterSize">
            <summary>
滤波窗口（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnFrost_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnFrost_Exchange_Info.strOutputDir">
            <summary>
输出文件目录
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterEnFrost_Exchange_Info.strInputFileList">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterEnFrost_Exchange_Info">
            <summary>
EnFrost滤波算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.EnFrostDataType.EnFrost_Intensity">
            <summary>
多视强度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.EnFrostDataType.EnFrost_Amplitude">
            <summary>
多视幅度
</summary>
        </member>
        <member name="P:PIE.SARAlgo.FilterEnFrostAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterEnFrostAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterEnFrostAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterEnFrostAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterEnFrostAlgo">
            <summary>
EnFrost滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Radarsat2_DataSLCImportAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开	
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strCalibrationFile">
            <summary>
辐射定标文件（目录下的三个文件之一：luBeta.xml、lutGamma.xml、lutSigma.xml）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.enumLut">
            <summary>
辐射校正类型
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strOutputFileDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strOutFilePrefix">
            <summary>
输出文件名前缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.bImageryVVSelected">
            <summary>
是否输入VV
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.bImageryVHSelected">
            <summary>
是否输入VH
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.bImageryHVSelected">
            <summary>
是否输入HV
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.bImageryHHSelected">
            <summary>
是否输入HH
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strInputVVFile">
            <summary>
输入VV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strInputVHFile">
            <summary>
输入VH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strInputHVFile">
            <summary>
输入HV极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strInputHHFile">
            <summary>
输入HH极化文件 (*.tiff)
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info.strProductXml">
            <summary>
输入影像元数据文件 (*.xml)
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Radarsat2_DataSLCImport_Exchange_Info">
            <summary>
 Radarsat2数据导入算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.Radarsat2_DataSLCImportAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Radarsat2_DataSLCImportAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Radarsat2_DataSLCImportAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Radarsat2_DataSLCImportAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Radarsat2_DataSLCImportAlgo">
            <summary>
Radarsat2数据导入
</summary>
        </member>
        <member name="M:PIE.SARAlgo.TSX_SLCDataImportAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.TSX_SLCDataImport_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开
</summary>
        </member>
        <member name="F:PIE.SARAlgo.TSX_SLCDataImport_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.TSX_SLCDataImport_Exchange_Info.strOutputFile">
            <summary>
输出文件
</summary>
        </member>
        <member name="F:PIE.SARAlgo.TSX_SLCDataImport_Exchange_Info.strInputFile">
            <summary>
输入文件（*.h5）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.TSX_SLCDataImport_Exchange_Info">
            <summary>
TerraSAR数据导入
</summary>
        </member>
        <member name="P:PIE.SARAlgo.TSX_SLCDataImportAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.TSX_SLCDataImportAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.TSX_SLCDataImportAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.TSX_SLCDataImportAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.TSX_SLCDataImportAlgo">
            <summary>
TerraSARd数据导入
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_TransformToDbAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_TransformToDb_Exchange_Info.strOutputDataFilesList">
            <summary>
导入完的影像存放在该集合下，用于处理完后在PIE中打开
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_TransformToDb_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_TransformToDb_Exchange_Info.enTransDataType">
            <summary>
文件转换类型
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_TransformToDb_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_TransformToDb_Exchange_Info.strOutDir">
            <summary>
输出文件路径
</summary>
        </member>
        <member name="F:PIE.SARAlgo.Batch_TransformToDb_Exchange_Info.strInputFilesList">
            <summary>
输入影像列表（*.tif,*.tiff,*.img
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Batch_TransformToDb_Exchange_Info">
            <summary>
复数据转换算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.TransToDb_DataType.TransToDb_Intensity">
            <summary>
强度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.TransToDb_DataType.TransToDb_Amplitude">
            <summary>
幅度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.TransToDb_DataType.TransToDb_Complex">
            <summary>
复数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.Batch_TransformToDbAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_TransformToDbAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_TransformToDbAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.Batch_TransformToDbAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.Batch_TransformToDbAlgo">
            <summary>
复数据转换
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterGammaAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterGamma_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterGamma_Exchange_Info.EnumImageType">
            <summary>
输入数据的类型选项 { Gamma_Amplitude, Gamma_Intensity }
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterGamma_Exchange_Info.lNumberOfLook">
            <summary>
视数（正整数，默认为1）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterGamma_Exchange_Info.nFilterSize">
            <summary>
滤波窗口（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterGamma_Exchange_Info.strSuffix">
            <summary>
输出文件名后缀
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterGamma_Exchange_Info.strOutputDir">
            <summary>
输出文件目录
</summary>
        </member>
        <member name="F:PIE.SARAlgo.FilterGamma_Exchange_Info.strInputFileList">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterGamma_Exchange_Info">
            <summary>
Gamma滤波算法参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GammaDataType.Gamma_Intensity">
            <summary>
强度
</summary>
        </member>
        <member name="F:PIE.SARAlgo.GammaDataType.Gamma_Amplitude">
            <summary>
幅度
</summary>
        </member>
        <member name="P:PIE.SARAlgo.FilterGammaAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterGammaAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterGammaAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.FilterGammaAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.FilterGammaAlgo">
            <summary>
Gamma滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_BoxcarFilterAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BoxcarFilter_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BoxcarFilter_Exchange_Info.nWinCol">
            <summary>
列窗口大小（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BoxcarFilter_Exchange_Info.nWinLine">
            <summary>
行窗口大小（大于等于3的奇数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BoxcarFilter_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_BoxcarFilter_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_BoxcarFilter_Exchange_Info">
            <summary>
Boxcar滤波处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_BoxcarFilterAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_BoxcarFilterAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_BoxcarFilterAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_BoxcarFilterAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_BoxcarFilterAlgo">
            <summary>
Boxcar滤波
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PauliDecAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.DataTypeIn">
            <summary>
输入数据类型选项（1：T3矩阵，2：C3矩阵）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.bStretch">
            <summary>
是否拉伸
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.nWinCol">
            <summary>
列窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.nWinLine">
            <summary>
行窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage33">
            <summary>
T33或C33影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage23_imag">
            <summary>
T23_imag或C23_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage23_real">
            <summary>
T23_real或C23_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage22">
            <summary>
T22或C22影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage13_imag">
            <summary>
T13_imag或C13_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage13_real">
            <summary>
T13_real或C13_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage12_imag">
            <summary>
T12_imag或C12_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage12_real">
            <summary>
T12_real或C12_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strImage11">
            <summary>
T11或C11影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_PauliDec_Exchange_Info">
            <summary>
Pauli分解处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_PauliDecAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PauliDecAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PauliDecAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_PauliDecAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_PauliDecAlgo">
            <summary>
Pauli分解
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_CloudePottierDecAlgo.get_Params">
            <summary>
参数
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strFileTypeCode">
            <summary>
文件编码类型
ENVI IMG(*.img)—ENVI
ERDAS IMG(*.img)--HFA
GeoTIFF(*.tif *.tiff)----GTiff
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.DataTypeIn">
            <summary>
输入数据类型选项（1：T3矩阵，2：C3矩阵）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.bStretch">
            <summary>
是否拉伸
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.nWinCol">
            <summary>
列窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.nWinLine">
            <summary>
行窗口大小（正整数）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage33">
            <summary>
T33或C33影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage23_imag">
            <summary>
T23_imag或C23_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage23_real">
            <summary>
T23_real或C23_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage22">
            <summary>
T22或C22影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage13_imag">
            <summary>
T13_imag或C13_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage13_real">
            <summary>
T13_real或C13_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage12_imag">
            <summary>
T12_imag或C12_imag影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage12_real">
            <summary>
T12_real或C12_real影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strImage11">
            <summary>
T11或C11影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strOutputFile">
            <summary>
输出文件路径（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="F:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info.strInputFile">
            <summary>
输入影像（*.tif,*.tiff,*.img）
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_CloudePottierDec_Exchange_Info">
            <summary>
CloudePottier分解处理算法参数
</summary>
        </member>
        <member name="P:PIE.SARAlgo.PolSAR_CloudePottierDecAlgo.Params">
            <summary>
参数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_CloudePottierDecAlgo.Finalize">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_CloudePottierDecAlgo.Dispose">
            <summary>
析构函数
</summary>
            <summary>
析构函数
</summary>
        </member>
        <member name="M:PIE.SARAlgo.PolSAR_CloudePottierDecAlgo.#ctor">
            <summary>
构造函数
</summary>
            <summary>
构造函数
</summary>
        </member>
        <member name="T:PIE.SARAlgo.PolSAR_CloudePottierDecAlgo">
            <summary>
CloudePottier分解
</summary>
        </member>
        <member name="D:SysCarto.GraphicsLayerPtr">
@brief   图形图层  智能指针对象

</member>
        <member name="M:SysCarto.GraphicsLayer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.GraphicsLayer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.GraphicsLayer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] dpType  类型
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.GraphicsLayer.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysCarto.GraphicsLayer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.GraphicsLayer.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.GraphicsLayer">
@class GraphicsLayer
	* @brief  图形图层

</member>
        <member name="F:SysCarto.IGraphicsContainer.m_ptrNodeEditElem">
@brief  当前编辑的元素

</member>
        <member name="F:SysCarto.IGraphicsContainer.m_lstSelIDs">
@brief  ID集合

</member>
        <member name="F:SysCarto.IGraphicsContainer.m_vecElems">
@brief 元素集合

</member>
        <member name="M:SysCarto.IGraphicsContainer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制
@param [in] painter   绘图设备
@param [in] ptrTrans  显示转换对象
@param [in] dpType       图层绘制阶段类型
@param [in] ptrTracker   取消转换
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SendToBack(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 向后一层 
@param [in]  listElems  element元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SendBackward(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 低端显示 
@param [in]  listElems  element元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.BringToFront(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 顶端显示 
@param [in]  listElems  element元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.BringForward(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 向前一层 
@param [in]  listElems  element元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.UpdateElement(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 更新Element
@param [in]  strID ID标号
@param [in]  ptrNewElem 新元素
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SetNodeEditElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置当前编辑的Element 
@param [in]  ptrElem 元素
@return  void 

</member>
        <member name="M:SysCarto.IGraphicsContainer.GetNodeEditElement">
@brief 获得当前编辑的Element 
@return  ElementPtr 元素

</member>
        <member name="M:SysCarto.IGraphicsContainer.FindElementByName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过name查找Element
@param [in]  strName 名称
@return  ElementPtr 元素

</member>
        <member name="M:SysCarto.IGraphicsContainer.FindElementByID(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 通过ID查找Element 
@param [in]  strID ID编号
@return  ElementPtr 元素 

</member>
        <member name="M:SysCarto.IGraphicsContainer.UnSelectElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 反向选择Elements
@param [in] listElems 元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.UnSelectElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 反向选择Element 
@param [in] ptrElem 元素
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.UnSelectAllElements">
@brief 取消所有Element的选择 
@return  void 

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectionBounds">
@brief 获取选中的边界
@return  SysGeometry::EnvelopePtr  选中的边界

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectElementsByGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
@brief 通过几何范围选择元素
@param [in] ptrFilterGeo 几何范围
@param [in] clearSrc 是否清除之前选择 
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获得所有选中的元素
@param [in] listElems 元素集合
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获得选中的元素
@param [in] ptrElem 元素
@return  void 

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectedElement(System.Int32)">
@brief 获得选中的元素
@param [in] index 索引编号 
@return  ElementPtr 选中的元素

</member>
        <member name="M:SysCarto.IGraphicsContainer.SelectAllElements">
@brief 选中所有元素
@return  void

</member>
        <member name="M:SysCarto.IGraphicsContainer.ElementSelectionCount">
@brief 获得选中元素数量
@return  int  选中元素数量

</member>
        <member name="M:SysCarto.IGraphicsContainer.IsElementSelected(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 元素是否选中
@param [in] ptrElem 元素对象
@return  bool 是否选中

</member>
        <member name="M:SysCarto.IGraphicsContainer.DeleteAllElements">
@brief 删除所有的元素
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.DeleteElement(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除元素
@param [in] strID 元素ID
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.DeleteElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 删除元素
@param [in] ptrElement 元素
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.InsertElement(System.Int32,SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 插入元素到容器
@param [in] ptrElement 元素对象
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.AddElements(QList&lt;SysUtility._ptr_t&lt;SysCarto.Element&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加元素集到容器
@param [in] vecElems 元素对象集合
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.AddElement(SysUtility._ptr_t&lt;SysCarto.Element&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 添加元素到容器
@param [in] ptrElement 元素对象
@return void

</member>
        <member name="M:SysCarto.IGraphicsContainer.GetElementCount">
@brief 获取元素数量
@return  int 元素数量

</member>
        <member name="M:SysCarto.IGraphicsContainer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.IGraphicsContainer.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.ElementOrderOperation">
@brief 声明友元类

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementsReordered">
@brief 元素集重排序信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementUpdated">
@brief 更新元素信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.AllElementsDeleted">
@brief 删除所有元素集信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementsDeleted">
@brief 删除元素集信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementDeleted">
@brief 删除元素信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementsAdded">
@brief 添加元素集信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementAdded">
@brief 添加元素信号

</member>
        <member name="F:SysCarto.IGraphicsContainerEvents.ElementsSelectionChanged">
@brief 选中元素集变化信号

</member>
        <member name="T:SysCarto.IGraphicsContainerEvents">
@class IGraphicsContainerEvents
@brief 图元容器事件接口

</member>
        <member name="F:SysCarto.Element.m_bLocked">
@brief  是否加锁变量

</member>
        <member name="F:SysCarto.Element.m_bFixedSize">
@brief  是否按原比例大小变量

</member>
        <member name="F:SysCarto.Element.m_AnchorPoint">
@brief  锚点

</member>
        <member name="F:SysCarto.Element.m_bRatioed">
@brief  是否按纵横比缩放变量

</member>
        <member name="F:SysCarto.Element.m_CusomerProperty">
@brief  用户属性

</member>
        <member name="F:SysCarto.Element.m_ptrGeometry">
@brief  几何对象

</member>
        <member name="F:SysCarto.Element.m_ElementType">
@brief  元素类型

</member>
        <member name="F:SysCarto.Element.m_bVisible">
@brief  是否可视化变量

</member>
        <member name="F:SysCarto.Element.m_bCanRotate">
@brief  是否可以旋转变量

</member>
        <member name="F:SysCarto.Element.m_strName">
@brief  名称

</member>
        <member name="F:SysCarto.Element.m_strID">
@brief  ID

</member>
        <member name="M:SysCarto.Element.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Element.#ctor">
@brief 构造函数

</member>
        <member name="M:SysCarto.Element.CopyTo(SysCarto.Element*)">
@brief 拷贝到Element
@param [in] Element* ptrElement Element对象

</member>
        <member name="M:SysCarto.Element.Clone">
@brief 克隆
@return ElementPtr 克隆对象

</member>
        <member name="M:SysCarto.Element.GetAnchorPoint">
@brief 获取锚点
@return 

</member>
        <member name="M:SysCarto.Element.SetAnchorPoint(SysCarto.pieAnchorPointEnum)">
@brief 设置锚点
@param [in] pos 
@return 

</member>
        <member name="M:SysCarto.Element.SetLocked(System.Boolean)">
@brief 设置是否被锁定
@param [in] bLocked  是否被锁定
@return void

</member>
        <member name="M:SysCarto.Element.IsLocked">
@brief 是否被锁定。被锁定之后无法被选中。
@return bool 是否被锁定

</member>
        <member name="M:SysCarto.Element.GetFixedSize">
@brief 获取原比例大小
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.SetFixedAspectRatio(System.Boolean)">
@brief 设置是否按原比例缩放 
@param [in] bRatioed 是否设置
@return void 

</member>
        <member name="M:SysCarto.Element.GetFixedAspectRatio">
@brief 获取是否按原比例缩放 
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param [in] PointPtr originPoint 参照点
@param [in] double sx x方向缩放
@param [in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param [in] PointPtr originPoint 参照点
@param [in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.Move(System.Double,System.Double)">
@brief 移动
@param [in] double dx x方向的偏移
@param [in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysCarto.Element.QueryBounds(SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  查询边界
@param [in] ptrTrasform  显示转换对象
@return  SysGeometry::EnvelopePtr  包络线对象

</member>
        <member name="M:SysCarto.Element.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  绘制
@param [in] painter  绘图设备
@param [in] ptrTrasform  显示转换对象
@param [in] ptrTracker   取消转换
@return  void

</member>
        <member name="M:SysCarto.Element.HitTest(System.Double,System.Double,System.Double)">
@brief 点击测试
@param [in]  x  X坐标值
@param [in]  y  Y坐标值
@param [in]  tolerance  偏差量
@return bool  是否成功

</member>
        <member name="M:SysCarto.Element.SetVisibility(System.Boolean)">
@brief  设置可见
@param [in] bVisible 是否设置可见
@return void

</member>
        <member name="M:SysCarto.Element.IsVisible">
@brief 是否可见
@return bool 是 true, 否 false

</member>
        <member name="M:SysCarto.Element.GetExtent">
@brief 获取范围
@return SysGeometry::EnvelopePtr 范围

</member>
        <member name="M:SysCarto.Element.SetGeometry(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置几何类型
@param [in] ptrGeometry 几何类型
@return void

</member>
        <member name="M:SysCarto.Element.GetGeometry">
@brief 获取几何类型
@return SysGeometry::GeometryPtr  几何类型

</member>
        <member name="M:SysCarto.Element.SetCusomerProperty(QVariant!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置用户属性
@param [in] prop 万能数据类型(QT内置数据类型）
@return void

</member>
        <member name="M:SysCarto.Element.GetCustomerProperty">
@brief 获取用户属性
@return QVariant 用户属性

</member>
        <member name="M:SysCarto.Element.CanRotate">
@brief 是否可以旋转
@return bool 是true,否 false

</member>
        <member name="M:SysCarto.Element.GetElementType">
@brief 获取元素类型
@return ElementType 元素类型

</member>
        <member name="M:SysCarto.Element.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  设置名字
@param [in] name 名字
@return void

</member>
        <member name="M:SysCarto.Element.GetName">
@brief 获取名字
@return QString 名字

</member>
        <member name="M:SysCarto.Element.GetID">
@brief 获取ID
@return QString ID

</member>
        <member name="T:SysCarto.IGraphicsContainer">
@brief 声明友元类


@class IGraphicsContainer
@brief 图元容器接口

</member>
        <member name="T:SysCarto.Element">
@brief 类的前置声明和智能指针定义


@class Element
@brief 元素

</member>
        <member name="T:SysCarto.ElementType">
@class  ElementType
@brief  元素类型 枚举

</member>
        <member name="F:ElementScrew">
@brief 螺旋形

</member>
        <member name="F:ElementLineArrow">
@brief 线箭头

</member>
        <member name="F:ElementArrow">
@brief 箭头

</member>
        <member name="F:ElementCurve">
@brief 曲线

</member>
        <member name="F:ElementMapSurroundFrame">
@brief 圆

</member>
        <member name="F:ElementMapFrame">
@brief 地图框架

</member>
        <member name="F:ElementGroup">
@brief 组

</member>
        <member name="F:ElementText">
@brief 文本

</member>
        <member name="F:ElementFrame">
@brief 框架

</member>
        <member name="F:ElementPicture">
@brief 图片

</member>
        <member name="F:ElementRectangle">
@brief 矩形

</member>
        <member name="F:ElementCircle">
@brief 圆

</member>
        <member name="F:ElementEllipse">
@brief 椭圆

</member>
        <member name="F:ElementPolygon">
@brief 面

</member>
        <member name="F:ElementPolyline">
@brief 线

</member>
        <member name="F:ElementMarker">
@brief 点

</member>
        <member name="F:ElementUnknown">
@brief 无类型

</member>
        <member name="F:SysCarto.Layer.m_pCacheModel">
@brief 线程缓存模型

</member>
        <member name="F:SysCarto.Layer.m_bRequireRefresh">
@brief 是否刷新视图

</member>
        <member name="F:SysCarto.Layer.m_ptrSRef">
@brief 图层空间参考

</member>
        <member name="F:SysCarto.Layer.m_ptrAreaOfInterestEnv">
@brief 可见区域

</member>
        <member name="F:SysCarto.Layer.m_dMinimumScale">
@brief 最小比例尺

</member>
        <member name="F:SysCarto.Layer.m_dMaximumScale">
@brief 最大比例尺

</member>
        <member name="F:SysCarto.Layer.m_bIsVisible">
@brief 图层是否可见

</member>
        <member name="F:SysCarto.Layer.m_bIsValid">
@brief 是否是有效图层

</member>
        <member name="F:SysCarto.Layer.m_strDesc">
@brief 图层描述信息

</member>
        <member name="F:SysCarto.Layer.m_layerType">
@brief 图层类型

</member>
        <member name="F:SysCarto.Layer.m_strDataSourcePath">
@brief 数据路径

</member>
        <member name="F:SysCarto.Layer.m_strName">
@brief 图层名称

</member>
        <member name="F:SysCarto.Layer.m_strID">
@brief  图层ID

</member>
        <member name="M:SysCarto.Layer.CopyTo(SysCarto.Layer*)">
@brief 拷贝到Layer
@param [in] Layer* Layer对象

</member>
        <member name="M:SysCarto.Layer.GetOffset(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取渲染位移。
@return void

</member>
        <member name="M:SysCarto.Layer.SetOffset(System.Double,System.Double)">
@brief 设置渲染位移。只影响图层的渲染位置。单位与map可见范围的单位相同
@return void

</member>
        <member name="M:SysCarto.Layer.Refresh">
@brief  刷新图层
@return void 

</member>
        <member name="M:SysCarto.Layer.Clone">
@brief 克隆
@return LayerPtr 克隆对象

</member>
        <member name="M:SysCarto.Layer.RaisePropertyChanged">
@brief 触发属性变化事件
@return void 
@remark 当属性变化时，调用此方法触发属性变化事件

</member>
        <member name="M:SysCarto.Layer.IsRequireRefresh">
@brief 是否需要刷新视图
@return  bool  是否刷洗

</member>
        <member name="M:SysCarto.Layer.Draw(QPainter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysDisplay.DisplayTransformation&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUI.LayerDrawPhaseType,SysUtility._ptr_t&lt;SysUI.TrackerCancel&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 绘制图层
@param [in] painter 绘图设备对象
@param [in] ptrTransform 显示转换对象
@param [in] dpType 绘图类型
@param [in] ptrTrackerCancel  取消轨迹
@return  void

</member>
        <member name="M:SysCarto.Layer.GetSpatialReference">
@brief 获得图层空间参考
@return SysGeometry::SpatialReferencePtr 空间参考对象

</member>
        <member name="M:SysCarto.Layer.SetMinimumScale(System.Double)">
@brief 设置图层可见最小比例尺
@param[in] double scale  最小比例尺
@return void

</member>
        <member name="M:SysCarto.Layer.GetMinimumScale">
@brief 获得图层可见最小比例尺
@return  double 最小比例尺

</member>
        <member name="M:SysCarto.Layer.SetMaximumScale(System.Double)">
@brief 设置图层可见最大比例尺
@param[in] double scale 最大比例尺
@return  void

</member>
        <member name="M:SysCarto.Layer.GetMaximumScale">
@brief  获得图层可见最大比例尺
@return double 最大比例尺

</member>
        <member name="M:SysCarto.Layer.SetAreaOfInterest(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置可见区域
@param[in] SysGeometry::EnvelopePtr ptrEnv  包络线范围
@return  void

</member>
        <member name="M:SysCarto.Layer.GetExtent">
@brief 获得图层范围
@return  SysGeometry::EnvelopePtr 图层范围  

</member>
        <member name="M:SysCarto.Layer.SetVisibility(System.Boolean)">
@brief 设置图层可见性
@param[in] bool visible 是否可见
@return void

</member>
        <member name="M:SysCarto.Layer.GetVisibility">
@brief 获取图层可见性
@return  bool  是否可见

</member>
        <member name="M:SysCarto.Layer.IsValid">
@brief 是否是有效图层
@return  bool  是否有效

</member>
        <member name="M:SysCarto.Layer.GetLayerType">
@brief 获取图层类型
@return  LayerType 图层类型

</member>
        <member name="M:SysCarto.Layer.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置图层描述信息
@param [in] strDesc 图层描述信息
@return void

</member>
        <member name="M:SysCarto.Layer.GetDescription">
@brief 获得图层描述信息
@return QString 图层描述信息

</member>
        <member name="M:SysCarto.Layer.GetDataSourcePath">
@brief 获得数据路径
@return QString 数据路径

</member>
        <member name="M:SysCarto.Layer.GetName">
@brief 获得图层名称 
@return  QString 图层名称

</member>
        <member name="M:SysCarto.Layer.GetID">
@brief 获得图层ID
@return  QString  图层ID

</member>
        <member name="M:SysCarto.Layer.Dispose">
@brief 析构函数

</member>
        <member name="M:SysCarto.Layer.#ctor">
@brief 构造函数

</member>
        <member name="T:SysCarto.MultiLayer">
@brief 声明多数据集图层为当前类的友元类

</member>
        <member name="T:SysCarto.GroupLayer">
@brief 声明图层组图层为当前类的友元类

</member>
        <member name="T:SysCarto.AnimationLayer">
@brief 声明动画图层为当前类的友元类

</member>
        <member name="T:SysCarto.LayerConstructInfo">
@brief 声明图层创建类为当前类的友元类

</member>
        <member name="T:SysCarto.Map">
@brief 声明地图类为当前类的友元类

</member>
        <member name="T:SysCarto.LayerSerializer">
@brief 声明图层序列化类为当前类的友元类

</member>
        <member name="T:SysCarto.ViewState">
@class  ViewState
@brief  视图状态  枚举

</member>
        <member name="F:ViewStateRenderCompleted">
@brief  渲染完成

</member>
        <member name="F:ViewStateDataLoaded">
@brief  数据加载完成

</member>
        <member name="F:ViewStateNone">
@brief  无

</member>
        <member name="T:SysCarto.LayerCacheModelType">
@class  LayerCacheModelType
@brief  图层缓存类型

</member>
        <member name="F:LayerCacheModelType_LabelCacheModel">
@brief  注记缓存模型

</member>
        <member name="F:LayerCacheModelType_ImageTileModel">
@brief  瓦片图像缓存模型

</member>
        <member name="F:LayerCacheModelType_ImageModel">
@brief  普通图像缓存模型

</member>
        <member name="F:LayerCacheModelType_Unkown">
@brief  普通图像缓存模型

</member>
        <member name="T:SysCarto.LayerType">
@class  LayerType
@brief  图层类型 枚举

</member>
        <member name="F:LayerTypeAnimationLayer">
@brief  动画图层类型

</member>
        <member name="F:LayerTypeTiledLayer">
@brief  瓦片图层类型

</member>
        <member name="F:LayerTypeMultiLayer">
@brief  多图层类型

</member>
        <member name="F:LayerTypeGroupLayer">
@brief  组图层类型

</member>
        <member name="F:LayerTypeGraphicsLayer">
@brief  图形图层类型

</member>
        <member name="F:LayerTypeFeatureLayer">
@brief  矢量要素图层类型

</member>
        <member name="F:LayerTypeRasterLayer">
@brief  栅格图层类型

</member>
        <member name="F:LayerTypeUnknown">
@brief  未知类型

</member>
        <member name="F:SysCarto.ILayerEvents.PropertyChanged">
@brief  属性改变信号

</member>
        <member name="F:SysCarto.ILayerEvents.RenderChanged">
@brief  渲染改变信号

</member>
        <member name="F:SysCarto.ILayerEvents.VisibilityChanged">
@brief  可见性改变信号

</member>
        <member name="T:SysCarto.ILayerEvents">
@class ILayerEvents
@brief  图层事件

</member>
        <member name="T:SysCarto.Layer">
@brief   类的前置声明


@brief 类的前置声明和智能指针对象


@class Layer
@brief 图层基类

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_nPreciseNumber">
@brief 显示精度位数

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_bDisplayDelimiter">
@brief 是否显示千分位分隔符

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_displayUnits">
@brief 显示的坐标单位

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_units">
@brief 实际的单位

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_Bounds">
@brief 全图地图范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_FittedBounds">
@brief 地图定制范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_VisibleBounds">
@brief 地图显示范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_pDevice">
@brief 绘图设备对象指针

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DeviceFrame">
@brief 设备框架范围

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_ptrSpatialReference">
@brief 地图的空间参考

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_dPageScale">
@brief 制图比例

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_MapScale">
@brief 当前地图比例尺

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DPI">
@brief 当前屏幕的DPI

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfMapUnitPerDeviceUnit_Y">
@brief 每设备单位的地图距离Y

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfMapUnitPerDeviceUnit_X">
@brief 每设备单位的地图距离X

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfDeviceUnitPerMapUnit_Y">
@brief 每地图单位的设备距离Y

</member>
        <member name="F:SysDisplay.DisplayTransformation.m_DistanceOfDeviceUnitPerMapUnit_X">
@brief 每地图单位的设备距离X

</member>
        <member name="M:SysDisplay.DisplayTransformation.CalculateVisibleExtent">
@brief 根据屏幕范围重新计算可视范围
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.Clone">
@brief 克隆
@return DisplayTransformationPtr 克隆成果 显示转换对象指针

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPaintDevice(QPaintDevice*)">
@brief  设置绘图设备
@param [in] QPaintDevice* pDevice 绘图设备指针对象
@return  void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPaintDevice">
@brief  获取绘图设备
@return  QPaintDevice* 绘图设备指针

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDisplayUnits(SysUI.pieUnits)">
@brief 设置显示的单位
@brief
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDisplayUnits">
@brief 获取显示的单位
@brief
@return SysUI::pieUnits 

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPreciseNumber(System.Int32)">
@brief 设置坐标显示小数位
@brief
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPreciseNumber">
@brief 获取坐标显示小数位
@brief
@return int

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDisplayDelimiter(System.Boolean)">
@brief 设置是否显示千分位分隔符
@brief
@return  

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDisplayDelimiter">
@brief 获取是否显示千分位分隔符
@brief
@return  bool

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDPIRatio">
@brief 获得DPI比例(logical/physical)
@brief 
@return  double

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDevicePixelRatio">
@brief 获得设备像素比例
@brief 正常情况下返回1,高DPI视觉显示下返回2
@return  double

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetUnits(SysUI.pieUnits)">
@brief 设置单位值
@param[in] SysUI::pieUnits units 单位值
@return  void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetUnits">
@brief 获取单位值
@return SysUI::pieUnits  单位值

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoints(System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
@brief 从地图点转化为设备点
@param[in] int count	    点个数		
@param[in] double* deveiceX	设备点X集合
@param[in] double* deviceY	设备点Y集合
@param[out] double* mapX	地图点X集合
@param[out] double* mapY	地图点Y集合
@return bool 转换是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoint(QPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从设备点转化为地图点
@param[in] QPoint point 设备点
@return PointPtr 地图点

</member>
        <member name="M:SysDisplay.DisplayTransformation.ToMapPoint(System.Int32,System.Int32)">
@brief 从设备点转化为地图点
@param[in] int x 设备X
@param[in] int y 设备Y
@return PointPtr 地图点

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoints(System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
@brief 从地图点转化为设备点
@param[in] int count	    点个数
@param[in] double* mapX	地图点X集合
@param[in] double* mapY	地图点Y集合
@param[out] double* deveiceX	设备点X集合
@param[out] double* deviceY	设备点Y集合
@return bool 转换是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoint(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从地图点转化为设备点
@param[in] SysGeometry::PointPtr ptrPoint 地图点
@return QPoint 设备点

</member>
        <member name="M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double)">
@brief 从地图点转化为设备点
@param[in] double 地图点X
@param[in] double 地图点Y
@return QPoint 设备点

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetZoomResolution">
@brief  获取缩放设备每像素的图上距离
@param[in] bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetZoomResolution(System.Boolean)">
@brief  设置缩放设备每像素的图上距离
@param[in] bool bValue 是否为真
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.ZoomToPageScale(System.Double)">
@brief  缩放制图比例
@param[in] double mapscale 制图比例
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetPageScale(System.Double)">
@brief 设置制图比例
@param[in] double mapscale 制图比例
@return void

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetPageScale">
@brief 获得制图比例尺
@return 制图比例尺

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetMapScale(System.Double)">
@brief 设置地图比例尺
@param[in] double mapscale 地图比例尺
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetMapScale">
@brief 获得地图比例尺
@return 地图比例尺

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDpi(System.Double)">
@brief 设置屏幕的DPI
@param[in] int dpi X
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDpi">
@brief 获得屏幕的DPI
@return 屏幕DPI

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetResolution">
@brief 获得设备每像素的图上距离
@return 每像素的图上距离

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetExportFrame">
@brief 获得输出范围
@return QRect 输出框架

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetDeviceFrame">
@brief 获得设备范围
@return QRect 设备框架

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetDeviceFrame(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置设备框架
@param[in] QRect deviceFrame 设备框架
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetFittedBounds">
 @brief FittedBounds 设置VisibleBounds后，要根据DeviceFrame的宽高比进行修改，修正后的值，保存在FittedBounds。
		 用户输入的原始值，保存在VisibleBounds
 @return  SysGeometry::EnvelopePtr  Envelope包络范围对象

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetVisibleBounds">
@brief 获得可视范围
@return virtualSysGeometry::EnvelopePtr 可视范围

</member>
        <member name="M:SysDisplay.DisplayTransformation.IsOutValidExtent(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 判断范围是否是有效范围
@param[in] SysGeometry::EnvelopePtr ptrEnv 范围
@return bool 是否有效

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetVisibleBounds(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置可视范围
@param[in] SysGeometry::EnvelopePtr ptrVisibleBounds 可视范围
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetBounds">
@brief 获得全图范围
@return SysGeometry::EnvelopePtr 全图范围

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetBounds(SysUtility._ptr_t&lt;SysGeometry.Envelope&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置全图范围
@param[in] SysGeometry::EnvelopePtr ptrBounds 全图范围
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.GetSpatialReference">
@brief 获得空间参考
@return SysGeometry::SpatialReferencePtr 空间参考

</member>
        <member name="M:SysDisplay.DisplayTransformation.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考
@param[in] SysGeometry::SpatialReferencePtr ptrSReference 空间参考
@return bool 是否成功

</member>
        <member name="M:SysDisplay.DisplayTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysDisplay.DisplayTransformation.#ctor">
@brief 构造函数
@return

</member>
        <member name="F:SysDisplay.ITransformEvents.VisibleBoundsUpdated">
@brief 可视地图范围事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation
@param[out] bool 范围是否变化

</member>
        <member name="F:SysDisplay.ITransformEvents.UnitsUpdated">
@brief 单位更新事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.RotationUpdated">
@brief 地图旋转变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.ResolutionUpdated">
@brief 分辨率变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.DeviceFrameUpdated">
@brief 设备范围变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="F:SysDisplay.ITransformEvents.BoundsUpdated">
@brief 地图范围变化事件
@param[out] DisplayTransformation* 变化后的DisplayTransformation

</member>
        <member name="T:SysDisplay.ITransformEvents">
@class ITransformEvents
@brief 变化事件类

</member>
        <member name="T:SysDisplay.DisplayTransformation">
@brief 类的前置声明


@brief 类的前置声明和智能指针定义
@return


@class DisplayTransformation
	* @brief 显示转换

</member>
        <member name="F:SysGeometry.Point.m_Z">
@brief Z

</member>
        <member name="F:SysGeometry.Point.m_Y">
@brief Y

</member>
        <member name="F:SysGeometry.Point.m_X">
@brief X

</member>
        <member name="M:SysGeometry.Point.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Point.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Point.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Point.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Point.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Point.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Point.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Point.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Point.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Point.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Point.PutCoords(System.Double,System.Double,System.Double)">
@brief 设置坐标值
@param[in] double x X坐标值
@param[in] double y Y坐标值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetZ(System.Double)">
@brief 设置Z的值
@param[in] double z Z坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetY(System.Double)">
@brief 设置Y的值
@param[in] double y Y坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.SetX(System.Double)">
@brief 设置X的值
@param[in] double x X坐标值
@return void

</member>
        <member name="M:SysGeometry.Point.GetZ">
@brief 获得Z的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetY">
@brief 获得Y的值
@return double

</member>
        <member name="M:SysGeometry.Point.GetX">
@brief 获得X的值
@return double

</member>
        <member name="M:SysGeometry.Point.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Point.#ctor(System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double x X
@param[in] double y Y
@param[in] double z Z
@return

</member>
        <member name="M:SysGeometry.Point.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysUI.pieUnits">
@class pieUnits
	* @brief PIE中长度单位

</member>
        <member name="F:UnitsCount">
@brief 单位数量

</member>
        <member name="F:UnitsDecimeters">
@brief 分米

</member>
        <member name="F:UnitsDecimalDegrees">
@brief 度（十进制）

</member>
        <member name="F:UnitsKilometers">
@brief 千米

</member>
        <member name="F:UnitsMeters">
@brief 米

</member>
        <member name="F:UnitsCentimeters">
@brief 厘米

</member>
        <member name="F:UnitsMillimeters">
@brief 毫米

</member>
        <member name="F:UnitsNauticalMiles">
@brief 海里

</member>
        <member name="F:UnitsMiles">
@brief 英里

</member>
        <member name="F:UnitsYards">
@brief 码

</member>
        <member name="F:UnitsFeet">
@brief 英尺

</member>
        <member name="F:UnitsPoints">
@brief 点

</member>
        <member name="F:UnitsInches">
@brief 英寸

</member>
        <member name="F:UnitsUnknown">
@brief 未知

</member>
        <member name="F:SysGeometry.Envelope.m_MaxY">
@brief 最大的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MaxX">
@brief 最大的X

</member>
        <member name="F:SysGeometry.Envelope.m_MinY">
@brief 最小的Y

</member>
        <member name="F:SysGeometry.Envelope.m_MinX">
@brief 最小的X

</member>
        <member name="M:SysGeometry.Envelope.Buffer(System.Double,System.Int32,System.Int32)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.Envelope.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.Envelope.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.Envelope.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.Envelope.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.Envelope.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.Envelope.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.Envelope.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.Envelope.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑正确
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.Envelope.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Envelope.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.Envelope.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.Envelope.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.Envelope.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.Envelope.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.Envelope.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.Envelope.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.Envelope.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.Envelope.GetArea">
@brief 获得面积
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Envelope.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Envelope.TransformByGrid(System.Int32,System.Int32,SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换拖过网格形式（每个格点转换后再取Envelope）
@brief Transform失败时 可使用此函数
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@param[in] nRow 行数
@param[in] nCol 列数
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Envelope.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@brief 对四角坐标进行转换
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Envelope.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Envelope.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Envelope.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Envelope.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Envelope.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Envelope.SetEmpty">
@brief 设置为空
@return bool

</member>
        <member name="M:SysGeometry.Envelope.Normalize">
@brief 规范化（重新配置最大和最小的X和Y） 
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 重新设置中心点
@param[in] PointPtr ptrPoint 中心点
@return void

</member>
        <member name="M:SysGeometry.Envelope.CenterAt(System.Double,System.Double)">
@brief 重新设置中心点
@param[in] double dx 中心点X
@param[in] double dy 中心点Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.Expand(System.Double,System.Double,System.Boolean)">
@brief 缩放范围
@param[in] double dx X方向的缩放参数
@param[in] double dy Y方向的缩放参数
@param[in] bool asRatio 是否按照比例缩放
@return void

</member>
        <member name="M:SysGeometry.Envelope.PutCoords(System.Double,System.Double,System.Double,System.Double)">
@brief 设置四至坐标
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右下角的X
@param[in] double yMax 右下角的Y
@return void

</member>
        <member name="M:SysGeometry.Envelope.SetYMax(System.Double)">
@brief 设置右上角Y坐标
@param[in] double yMax 右上角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMax">
@brief 获得右上角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMax(System.Double)">
@brief 设置右上角X坐标
@param[in] double xMax 右上角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMax">
@brief 获得右上角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetYMin(System.Double)">
@brief 设置左下角Y坐标
@param[in] double yMin 左下角Y坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetYMin">
@brief 获得左下角Y坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.SetXMin(System.Double)">
@brief 设置左下角X坐标
@param[in] double xMin 左下角X坐标
@return void

</member>
        <member name="M:SysGeometry.Envelope.GetXMin">
@brief 获得左下角X坐标
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetHeight">
@brief 获得高度
@return double

</member>
        <member name="M:SysGeometry.Envelope.GetWidth">
@brief 获得宽度
@return double

</member>
        <member name="M:SysGeometry.Envelope.Dispose">
@brief 析构函数
@param[in] void
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(SysUtility._ptr_t&lt;SysGeometry.Point&gt;,SysUtility._ptr_t&lt;SysGeometry.Point&gt;)">
@brief 构造函数
@param[in] PointPtr ptrPoint1 边界点1
@param[in] PointPtr ptrPoint2 边界点2
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor(System.Double,System.Double,System.Double,System.Double)">
@brief 构造函数
@param[in] double xMin 左下角的X
@param[in] double yMin 左下角的Y
@param[in] double xMax 右上角的X
@param[in] double yMax 右上角的Y
@return

</member>
        <member name="M:SysGeometry.Envelope.#ctor">
@brief 构造函数
@param[in] void
@return

</member>
        <member name="F:SysGeometry.Geometry.m_ptrSpatialReference">
@brief 空间参考

</member>
        <member name="F:SysGeometry.Geometry.m_GeometryType">
@brief 几何对象类型

</member>
        <member name="F:SysGeometry.Geometry.m_Dimension">
@brief 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.GetArea">
@brief 获得面积
@returndouble

</member>
        <member name="M:SysGeometry.Geometry.GetLength">
@brief 获得长度
@return double 长度

</member>
        <member name="M:SysGeometry.Geometry.Clone">
@brief 克隆
@return GeometryPtr 克隆成果

</member>
        <member name="M:SysGeometry.Geometry.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.CoordinateTransformation&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换（会忽略原来的空间参考）
@param[in] CoordinateTransformationPtr ptrCT 坐标转换对象
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Transform(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 投影转换
@param[in] SpatialReferencePtr ptrSR_Target 目标空间参考
@return bool 是否转换成功

</member>
        <member name="M:SysGeometry.Geometry.Centroid">
@brief 获得质点
@return GeometryPtr 质点

</member>
        <member name="M:SysGeometry.Geometry.GetEnvelope">
@brief 获得空间范围
@return GeometryPtr 空间范围

</member>
        <member name="M:SysGeometry.Geometry.IsValid">
@brief 是否是有效的
@return bool 是否是有效的

</member>
        <member name="M:SysGeometry.Geometry.IsSimple">
@brief 是否是简单几何形状
@return bool 是否是简单几何形状

</member>
        <member name="M:SysGeometry.Geometry.IsEmpty">
@brief 是否为空
@return bool 是否为空

</member>
        <member name="M:SysGeometry.Geometry.SetEmpty">
@brief 设置为空
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.SetSpatialReference(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置空间参考（如果存在直接覆盖，不是转换）
@param[in] SpatialReferencePtr ptrSR 空间参考
@return bool 是否设置成功

</member>
        <member name="M:SysGeometry.Geometry.GetSpatialReference">
@brief 获得空间参考
@return SpatialReferencePtr 空间参考

</member>
        <member name="M:SysGeometry.Geometry.GetGeometryType">
@brief 获得几何体的类型
@return GeometryType 几何体的类型

</member>
        <member name="M:SysGeometry.Geometry.GetDimension">
@brief 获得几何体的维度
@return int 几何体的维度

</member>
        <member name="M:SysGeometry.Geometry.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Geometry.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Envelope">
@brief 类的前置声明和智能指针的定义


@class Envelope
	* @brief 包络线对象

</member>
        <member name="T:SysGeometry.GeometryHitPartType">
@class GeometryHitPartType
	* @brief 几何图形类型 枚举

</member>
        <member name="F:GeometryPartEndpoint">
@brief Hit结尾点

</member>
        <member name="F:GeometryPartCentroid">
@brief Hit中心点

</member>
        <member name="F:GeometryPartMidpoint">
@brief Hit中点

</member>
        <member name="F:GeometryPartBoundary">
@brief Hit边

</member>
        <member name="F:GeometryPartVertex">
@brief Hit节点

</member>
        <member name="F:GeometryPartNone">
@brief 无Hit

</member>
        <member name="M:SysGeometry.SpatialTopological.Buffer(System.Double,System.Int32,System.Int32)">
@brief 缓冲区查询
@param[in] double tolerance 缓冲距离，正数表示向外，负数表示向里
@param[in] double sideType 默认：0； 线的左边：1； 线的右边：2
@param[in] double endCapStyle 末端为圆形：0， 末端为方形：1
@return GeometryPtr 缓冲区

</member>
        <member name="M:SysGeometry.SpatialTopological.SymDifference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的对称差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 对称差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Difference(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的差集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 差集

</member>
        <member name="M:SysGeometry.SpatialTopological.Union(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的并集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 并集

</member>
        <member name="M:SysGeometry.SpatialTopological.Intersection(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 计算当前几何体和给定几何体的交集
@param[in] const GeometryPtr ptrGeo 给定的几何体
@return GeometryPtr 交集

</member>
        <member name="M:SysGeometry.SpatialTopological.ConvexHull">
@brief 计算当前几何形状的凸多边形
@return GeometryPtr 当前几何形状的凸多边形

</member>
        <member name="M:SysGeometry.SpatialTopological.Boundary">
@brief 计算当前几何体的边界
@return GeometryPtr 当前几何体的边界

</member>
        <member name="M:SysGeometry.SpatialTopological.Polygonize">
@brief 将一系列的边界构成一个多边形，只针对MultiLineString有效
@return GeometryPtr 构成的多边形，如果失败返回空

</member>
        <member name="M:SysGeometry.SpatialTopological.SimplifyPreserveTopology(System.Double)">
@brief 保持拓扑关系的情况下对当前几何体进行简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Simplify(System.Double)">
@brief 对当前几何体进行简化使得拓扑简化
@param[in] double tolerance 简化过程中的距离容差
@return GeometryPtr 几何图形对象

</member>
        <member name="M:SysGeometry.SpatialTopological.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialTopological.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialTopological">
@class SpatialTopological
	* @brief 空间拓扑类

</member>
        <member name="M:SysGeometry.SpatialRelation.Overlaps(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否重叠
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否重叠

</member>
        <member name="M:SysGeometry.SpatialRelation.Contains(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否包含
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否包含

</member>
        <member name="M:SysGeometry.SpatialRelation.Within(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否在其内部
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否在其内部

</member>
        <member name="M:SysGeometry.SpatialRelation.Crosses(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否穿越
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否穿越

</member>
        <member name="M:SysGeometry.SpatialRelation.Touches(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相接
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相接

</member>
        <member name="M:SysGeometry.SpatialRelation.Disjoint(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相离
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相离

</member>
        <member name="M:SysGeometry.SpatialRelation.Equals(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相等
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相等

</member>
        <member name="M:SysGeometry.SpatialRelation.Intersects(SysUtility._ptr_t&lt;SysGeometry.Geometry&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 是否相交
@param[in] const GeometryPtr ptrGeo 空间几何图形对象
@return bool 是否相交

</member>
        <member name="M:SysGeometry.SpatialRelation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.SpatialRelation.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.SpatialRelation">
@class SpatialRelation
	* @brief 空间关系类

</member>
        <member name="T:SysGeometry.Geometry">
@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Geometry
@brief 几何对象

</member>
        <member name="M:SysGeometry.Transform2D.Scale(SysUtility._ptr_t&lt;SysGeometry.Point&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double)">
@brief 缩放
@param[in] PointPtr originPoint 参照点
@param[in] double sx x方向缩放
@param[in] double sy y方向缩放
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Rotate(SysUtility._ptr_t&lt;SysGeometry.Point&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
@brief 旋转
@param[in] PointPtr originPoint 参照点
@param[in] double rotationAngle 旋转角度
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Move(System.Double,System.Double)">
@brief 移动
@param[in] double dx x方向的偏移
@param[in] double dy y方向的偏移
@return bool 是否成功

</member>
        <member name="M:SysGeometry.Transform2D.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.Transform2D.#ctor">
@brief 构造函数
@return

</member>
        <member name="T:SysGeometry.Transform2D">
@class Transform2D
	* @brief 二维变换

</member>
        <member name="T:SysGeometry.Point">
@brief 类的前期声明和智能指针的定义


@brief 类的前置声明和智能指针的定义


@class Point
	* @brief 点几何图形

</member>
        <member name="D:SysGeometry.CoordinateTransformationPtr">
@brief  坐标转换 智能指针对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_pOGRCoordinateTransformation">
@brief OGR的坐标转换对象

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceTarget">
@brief 目标坐标系统

</member>
        <member name="F:SysGeometry.CoordinateTransformation.m_ptrSpatialReferenceSource">
@brief 源坐标系统

</member>
        <member name="M:SysGeometry.CoordinateTransformation.TransformEx(System.Int32,System.Double*,System.Double*,System.Double*,System.Int32*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@param[in] int* pSuccess 每个坐标是否转换成功的标记
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Transform(System.Int32,System.Double*,System.Double*,System.Double*)">
@brief 坐标准换
@param[in] int count 要转换的点个数
@param[in] double* pX 要转换的点的X坐标数组
@param[in] double* pY 要转换的点的Y坐标数组
@param[in] double* pZ 要转换的点的Z坐标数组
@return bool 是否成功

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetTargetSpatialReference">
@brief 获得目标坐标系
@return SpatialReferencePtr 目标坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.GetSourceSpatialReference">
@brief 获得源坐标系
@return SpatialReferencePtr 源坐标系

</member>
        <member name="M:SysGeometry.CoordinateTransformation.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysGeometry.CoordinateTransformation.#ctor(SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t&lt;SysGeometry.SpatialReference&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief  构造函数
@param[in] SpatialReferencePtr ptrSourceSpatialReference 源坐标系
@param[in] SpatialReferencePtr ptrTargetSpatialReference 目标坐标系
@return

</member>
        <member name="T:SysGeometry.CoordinateTransformation">
@class CoordinateTransformation
	* @brief 坐标转换对象

</member>
        <member name="M:SysGeometry.SpatialReference.Clone">
@brief Clone方法
@return SpatialReferencePtr 空间参考对象指针

</member>
        <member name="M:SysGeometry.SpatialReference.GetHandle">
@brief 返回OGRSpatialReference的指针
@return void* 指针句柄

</member>
        <member name="M:SysGeometry.SpatialReference.MorphFromESRI">
@brief MorphFromESRI 从ESRI字符串转化为OGC的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.MorphToESRI">
@brief MorphToESRI 从OGC的WKT字符串转化为ESRI的WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromESRI(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从ESRI字符串导入
@param[in] QString strValue ESRI字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromEPSG(System.Int32)">
@brief 从EPSG编码导入
@param[in] EPSG编码
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToProj4">
@brief 导出为Proj4字符串
@return QString Proj4字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromProj4(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从Proj4字符串导入
@param[in] QString strValue Proj4字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToPrettyWkt">
@brief ExportToPrettyWkt 导出为格式化后的WKT字符串
@return QString 格式化后的WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ExportToWkt">
@brief ExportToWkt 导出为WKT字符串
@return QString WKT字符串

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromUserInput(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从Proj4字符串导入
@param[in] QString strProj Proj字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.ImportFromWkt(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 从WKT字符串导入
@param[in] QString strWkT WKT字符串
@return bool 是否成功

</member>
        <member name="M:SysGeometry.SpatialReference.SetRemarks(QString)">
@brief 设置备注信息
@param[in] QString remarks 备注信息
@return

</member>
        <member name="M:SysGeometry.SpatialReference.GetRemarks">
@brief 获得备注信息
@return QString 备注信息

</member>
        <member name="M:SysGeometry.SpatialReference.GetType">
@brief 获取类型
@return SpatialReferenceType 坐标系类型

</member>
        <member name="M:SysGeometry.SpatialReference.SetAlias(QString)">
@brief 设置别名
@param[in] QString alias 别名
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetAlias">
@brief 获取别名
@return QString 别名

</member>
        <member name="M:SysGeometry.SpatialReference.SetName(QString)">
@brief 设置名称
@param[in] QString name 名称
@return void

</member>
        <member name="M:SysGeometry.SpatialReference.GetName">
@brief 获得名字
@return QString 名称

</member>
        <member name="M:SysGeometry.SpatialReference.GetFactoryCode">
@brief 获得编码
@return int 编码

</member>
        <member name="M:SysGeometry.SpatialReference.Dispose">
@brief 析构函数
@return

</member>
        <member name="F:SysGeometry.SpatialReference.m_SpatialReferenceType">
@brief 成员变量 空间参考类型

</member>
        <member name="M:SysGeometry.SpatialReference.#ctor">
@brief 构造函数
@return

</member>
        <member name="D:SysGeometry.SpatialReferencePtr">
@brief 智能指针对象

</member>
        <member name="T:SysGeometry.SpatialReference">
@brief 类的前置声明


@class SpatialReference
	* @brief 空间参考接口

</member>
        <member name="T:SysGeometry.SpatialReferenceType">
@class SpatialReferenceType
	* @brief 空间参考类型

</member>
        <member name="F:ProjectedCS">
@brief 投影坐标系

</member>
        <member name="F:GeographicCS">
@brief 地理坐标系

</member>
        <member name="F:UnknownCS">
@brief 未知坐标系

</member>
        <member name="T:SysGeometry.GeometryType">
@enum  GeometryType
	* @brief  几何图形类型 枚举

</member>
        <member name="F:GeometryBSplineCurve">
@brief 平滑B样条曲线

</member>
        <member name="F:GeometryScrewLine">
@brief 螺线

</member>
        <member name="F:GeometrySplineCurve">
@brief 样条曲线

</member>
        <member name="F:GeometryGeometryCollection">
@brief 图形集合

</member>
        <member name="F:GeometryEllipse">
@brief 多面

</member>
        <member name="F:GeometryEnvelope">
@brief Envelope

</member>
        <member name="F:GeometryMultiPolygon">
@brief 多面

</member>
        <member name="F:GeometryPolygon">
@brief 面

</member>
        <member name="F:GeometryRing">
@brief 环

</member>
        <member name="F:GeometryMultiPolyline">
@brief 多线

</member>
        <member name="F:GeometryArc">
@brief 弧

</member>
        <member name="F:GeometryPolyline">
@brief 线

</member>
        <member name="F:GeometryMultiPoint">
@brief 多点

</member>
        <member name="F:GeometryPoint">
@brief 点

</member>
        <member name="F:GeometryUnknown">
@brief 无类型

</member>
        <member name="D:SysUI.TrackerCancelPtr">
@brief 取消追踪器类智能指针

</member>
        <member name="F:SysUI.TrackerCancel.m_mutex">
@brief 互斥锁

</member>
        <member name="F:SysUI.TrackerCancel.m_State">
@brief 状态

</member>
        <member name="M:SysUI.TrackerCancel.Reset">
@brief 重置
@return

</member>
        <member name="M:SysUI.TrackerCancel.IsCanced">
@brief 是否已经取消
@return

</member>
        <member name="M:SysUI.TrackerCancel.Cancel">
@brief 取消
@return

</member>
        <member name="M:SysUI.TrackerCancel.Dispose">
@brief 析构函数
@return

</member>
        <member name="M:SysUI.TrackerCancel.#ctor">
@brief 构造函数

</member>
        <member name="T:SysUI.TrackerCancel">
@class TrackerCancel
	* @brief  取消追踪器类

</member>
        <member name="T:SysUI.LayerDrawPhaseType">
@class DrawPhaseType
	* @brief 绘图类型

</member>
        <member name="F:DPSelection">
@brief  选择集

</member>
        <member name="F:DPAnnotation">
@brief  标注

</member>
        <member name="F:DPGeography">
@brief  Geo图形

</member>
        <member name="F:SysAlgo.ISysAlgo.ProgressChanged">
**
</member>
        <member name="M:SysAlgo.ISysAlgo.Cancel">
@brief 取消执行算法

</member>
        <member name="M:SysAlgo.ISysAlgo.Execute">
@brief 执行算法		
@return 算法执行是否成功

</member>
        <member name="M:SysAlgo.ISysAlgo.SetErrorInfo(System.Int32,QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置错误信息
@param [in] nErrCode 错误编号
@param [in] strErrMsg 错误消息

</member>
        <member name="M:SysAlgo.ISysAlgo.GetErrorInfo(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 获取错误信息
@param [out] nErrCode 错误编号
@param [out] strErrMsg 错误消息

</member>
        <member name="M:SysAlgo.ISysAlgo.SetParams(boost.any!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置算法参数
@param [in] anyData 算法参数
@return

</member>
        <member name="M:SysAlgo.ISysAlgo.GetParams">
@brief 获取算法参数
@return 算法参数

</member>
        <member name="M:SysAlgo.ISysAlgo.SetDescription(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置算法描述信息
@param [in] strDesc 算法描述信息
@return

</member>
        <member name="M:SysAlgo.ISysAlgo.GetDescription">
@brief 获取算法描述信息
@return 算法描述信息

</member>
        <member name="M:SysAlgo.ISysAlgo.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief 设置算法名称
@param [in] strName 算法名称

</member>
        <member name="M:SysAlgo.ISysAlgo.GetName">
@brief 获取算法名称
@return 算法名称

</member>
        <member name="M:SysAlgo.ISysAlgo.GetID">
@brief 获取算法ID
@return 算法ID

</member>
        <member name="T:SysAlgo.ISysAlgo">
@brief 算法基类接口

</member>
        <member name="M:SysUtility.CRef.Dispose">
@brief 析构函数 （虚函数）

</member>
        <member name="M:SysUtility.CRef.#ctor">
@brief 构造函数

</member>
        <member name="M:SysUtility.CRef.AddRef">
@brief 计数器独占地自增
@return unsigned long  返回计数器中对象的个数

</member>
        <member name="M:SysUtility.CRef.Release">
@brief 计数器独占地自减
@return unsigned long 返回计数器中对象的个数

</member>
        <member name="T:SysUtility.CRef">
@class CRef
	* @brief 管理引用计数器类

</member>
        <member name="M:ConvertImageToQImage(System.Drawing.Image)">
            <summary>
转换Image句柄为QImage
</summary>
            <param name="image">转换的Image</param>
            <returns>QImage对象</returns>
        </member>
        <member name="M:ConvertQImageToImage(QImage*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QImage为Image句柄
</summary>
            <param name="image">转换的QImage</param>
            <returns>Image句柄</returns>
        </member>
        <member name="M:ConvertObjectToQVariant(System.Object)">
            <summary>
转换Object句柄为QVariant
</summary>
            <param name="object">转换的Object</param>
            <returns>QVariant</returns>
        </member>
        <member name="M:ConvertQVariantToObject(QVariant*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QVariant为Object句柄
</summary>
            <param name="variant">转换的QVariant</param>
            <returns>Object句柄</returns>
        </member>
        <member name="M:ConvertColorToQColor(System.Drawing.Color)">
            <summary>
转换Color句柄为QColor
</summary>
            <param name="color">转换的Color</param>
            <returns>QColor</returns>
        </member>
        <member name="M:ConvertQColorToColor(QColor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QColor为Color
</summary>
            <param name="color">转换的QColor</param>
            <returns>Color</returns>
        </member>
        <member name="M:ConvertFontToQFont(System.Drawing.Font)">
            <summary>
转换Font句柄为QFont
</summary>
            <param name="font">转换的Font</param>
            <returns>QFont</returns>
        </member>
        <member name="M:ConvertQFontToFont(QFont*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QFont为Font句柄
</summary>
            <param name="font">转换的QFont</param>
            <returns>Font句柄</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns>转换后的String</returns>
        </member>
        <member name="M:ConvertQStringToString(QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.String@)">
            <summary>
转换QString为String句柄
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <returns />
        </member>
        <member name="M:ConvertStringToQString(System.String,QString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
转换String句柄为QString
</summary>
            <param name="strValueSource">转换前的String句柄</param>
            <param name="strValueTarget">转换后的String</param>
            <returns />
        </member>
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSame(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialReference.IsSameGeoCS(SysUtility._ptr_t<SysGeometry.SpatialReference>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.OffsetCurve(System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.SpatialTopological.UnionSub(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Geometry.ConvertToSameSpatialReference(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Geometry>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Envelope.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.QueryCoords(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.Distance(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDist(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(System.Double,System.Double,System.Double,System.Double,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.SqrDistToSegment(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysGeometry.Point.HitTest(SysGeometry.Point*,System.Double,SysGeometry.GeometryHitPartType,SysGeometry.Point*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.FromMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.ToMapPoint(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectBounds(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculateIntersectRect(QRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysDisplay.DisplayTransformation.CalculatePointBufferRect(SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.Layer.SetName(QString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.GetAllElements”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElements(SysUtility._ptr_t<SysGeometry.Geometry>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.QueryElementsByPoint(SysUtility._ptr_t<SysDisplay.DisplayTransformation>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SysUtility._ptr_t<SysGeometry.Point>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)”的格式错误的 XML 文档注释。-->
        <!-- 丢弃成员“M:SysCarto.IGraphicsContainer.SelectedElements”的格式错误的 XML 文档注释。-->
    </members>
</doc>